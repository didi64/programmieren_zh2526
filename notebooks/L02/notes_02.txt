Kurze Vorstellungsrunde
20'
Slides plus Installation von Docker desktop (nur Docker desktop)
20'

Notebooks 1.Teil:

1) Web-Ressources: W3 School, offizielles Python Tutorial
2) Der Befehl update: loesche Jupyterlab Intro, dann: update -n 1
3) Jupyterlab Intro: 
    Basics,  Hinweis: Beachte die Links
    Hello world, erste print-Anweisung

20' um sich mit Jupyterlab vertraut zu machen, Markdown-Tutorial!

====
edit contents und push und lasse weitere notbookss holen.

2) Wozu dient Jupyterlab ueberhaupt:
    -> Unterhaltung mit dem Interpreter.

Oeffne neues Notbook, benamse es,
Zeige: Integer, Floats, rechnen damit
Zeige Stings, rechnen damit
Zeige Booleans, 

3) Mini-Python;

  3a) Integer: Tippe ein paar Integers und Ausdruecke.
         23/5 vs 23 // 5,
         3*4 == 2*6
         1 == 1.0!

  Strings: 'Hello,' + 'world!'
         80 * '-'

  Wahrheitswerte/Booleans: not True, not False, False and True, False or True, 

  Operatoren: +,-,*,//,   == Einstellige: -, not

Vor 2. Notebook (MiniPython_II)
  3b) Variabeln, Ausdruecke un Zuweisungen.

Was sind Variabeln. x, x_1, number, resultat,

x = 2
y = 3*x
y

x = '-'
80 * x

Zuweisungen:

first_line = 'erste Zeile'
second_line = 'zweite Zeile'
third_line = 80 * '-'
s = first_line + '\n' + second_line + '\n' + third_line
print(s)


Bedinge Anweisungen:

answer = 'yes'
if answer == 'yes':
    print('do stuff for yes-case')



lasse den Interpreter die Fehler korrigieren!
answer =='yes'
if answer = 'yes'
    print(do stuff for yes-case)

while

n = 3
while n > 0:
    print(n)
    n = n - 1 # first!


# Zeichen eines String ausgeben

word = 'abcd'
n = len(s)
i = 0

while i < n:
    c = word[i]
    print(c)
    i = i + 1  # first!


# Zeichen suchen. Was passiert, falls der String das gesuchte Zewichennicht enthaelt?
word = 'abcde'
char = 'e'
i = 0

while word[i] != char:
    i = i + 1

print('Zeichen', char, 'tritt zum erten Mal an Position', i, 'auf')


# Sicherstellen das Schleifenbedingung falsch wird:
# gesuchtes Zeichen an word anhaengen.
word = 'abcdefgh'
char = 'e'
i = 0

word_with_char = word + char

while word_with_char[i] != char:
    i = i + 1

if i < len(word):
    print('Zeichen', char, 'tritt zum erten Mal an Position', i, 'auf')


Zeige ev. andere moeglichkeit:

text = 'agagdfsgdsf'
character = 'x'

n = len(text)
i = 0
contains_character = False

while i < n and not contains_character:
    if text[i] == character:
        contains_character = True
    i = i + 1

contains_character

Zeige, wie man Code analysieren kann: Mit print vieles Ausgeben

Kontrollfragen:
20 Min



Notebook MiniPython II

  Analysiere diese Programm: Liste von Zuweisungen und einer print-Anweisung.
  Beachte: Einruecken gehoert in Python zur Syntax!
  Manipuliere den Code.
  Beachte, was der Languageserver sagt, und worueber sich der Interpreter beklagt.



Minipython III: Was sind MiniPython Programme? Wie kann man das definieren?

6) erste Probleme in Minipython loesen
    Anzahl Stellen einer positiven ganzen Zahl bestimmen
        435 // 10 == 43 (letzte Ziffer wird abgeschnitten)
    Anzahl Stellen einer nicht-negativen ganzen Zahl bestimmen
    Teste, ob ein bestimmtes Zeichen in einem String vorkommt?
    Teste, ob ein bestimmte Ziffer in einer Zahl vorkommt?
    Zähle, wie oft ein bestimmtes Zeichen in einem String vorkommt
    Drehe ein Wort um
    Teste, ob ein Wort ein Palindrom ist (gleich dem umgedrehten Wort)
    Teste, ob eine Zahl eine Primzahl ist
    Zerlege ein Wort in zwei Teile
    Sortierte Wörter zusammenfügen




from_word1 = (j >= n) or (i < m and word1[i] <= word2[j])

i: momentante Position im 1. Wort
m: Laenge des 1. Worts
j: momentante Position im 2. Wort
n: Laenge des 2. Worts

Neachster Buchstabe kommt aus dem 1. Wort falls
- j >= n ( keine Buchstaben mehr im 2. Wort)
- es hat noch Buchstaben im 1. Wort (i < m) und der i-te Buchstabe vom 1. Worts is kleiner als der j-te Buchstabe vom 2. Worts

---
Stringliterale inkl. triple-quoted Strings (wegen DocStrings)

Funktionen I
Funktionen schreiben und in File/Modul speichern
    schreibe eine Funktion zu jedem im Notebook Mini-python geloesten PRoblem und
    speichere diese Funktionen in einem File
    minipython_funktionen.py
    
-> Funktionen_Beispiele mit Interlude: Koennen Funktionen mehr als einen Wert zurueckgeben?
   Bsp: split_word(word, idx) -> head, tail

   Nein, aber man kann ein Tuple, eine unveranederbare Liste mit diesen Werten zurueckgeben.
   - Tulpes_I.ipynb
  

   Komplexere Programme aus diesen Funktionen aufbauen.
   Sort_word

---

mehr zu print (print als Variadic Function)
Variadic_functions I: 
    f(*args, <defaltarg list>)

---

For_Schleifen_I.ipynb



if elif else (sign, fizzbuzz)

indexnotation
slicenotation

input

str-methoden (erster Blick auf Objekte)


f-Strings


----


2. Teil
=========
Typen und Objekte cont.
In python sind alle Werte Objekte.

Objekte haben Methoden
Basic type
Variabeln-Objekte-Referenzen

range, revisite indexing and slicing 'abcde'.__getitem__(slice(1,3))

divide and conquor: 
   Guessing Game: Strategy um rasch loesung zu finden
   Element in sortierter Liste finden
   Telefonlistenbeispiel

ev. Iterable, Iterator, exemplarisch zip und enumerate

Eingene implementationen einiger Stringmethoden
mit Interlude: enumerate
    was ist mit len, in, iter, next

RE: Telefonlistenbeispiel
   bucketlist strategy


